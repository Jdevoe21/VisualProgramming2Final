/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package fproject.arduinosketch.CodeEditer;

import fproject.arduinosketch.CodeEditer.Blocks.Variable;
import fproject.arduinosketch.CodeEditer.Blocks.Block;
import fproject.arduinosketch.CodeEditer.Blocks.Expression;
import fproject.arduinosketch.CodeEditer.Blocks.SetUpBlock;
import fproject.arduinosketch.CodeEditer.Blocks.LoopBlock;
import fproject.arduinosketch.circuit.Arduino;
import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author Jack
 */
public class BlockPanel extends javax.swing.JPanel {
    private static int toolBarWidth = 215;
    private static ToolBar toolbar;
    private BlockContainer editor;
    private Block selectedBlock;
    private SetUpBlock setup;
    private LoopBlock loop;
    
    private boolean isDragging;
    
    /**
     * Constructor:
     * Sets up the Block Panel window, initializes lists.
     */
    public BlockPanel() {
        isDragging = false;
        toolbar = new ToolBar();
        editor = new BlockContainer();
        loop = new LoopBlock(800, 0);
        setup = new SetUpBlock(230, 0);
        editor.blocks.add(loop);
        editor.blocks.add(setup);
        initComponents();
    }
    /**
     * Debug function for running a function on the selected block.
     */
    public void run(){
        Arduino.code = new Arduino.Code(setup, loop);
        Thread t = new Thread(Arduino.code);
        t.start();
        //selectedBlock.debug();
        getParent().repaint();
    }
    /**
     * Paints the tool bar line and every block and variable
     * @param g Java Graphics instance from the JPanel.
     */
    @Override
    public void paintComponent(Graphics g){
        g.setColor(Color.BLACK);
        g.fillRect(toolBarWidth, 0, 10, this.getHeight());
        for(Block block:editor.blocks){
            block.paintComponent(g);
        }
        for(Expression exp : editor.expressions){
            exp.paintComponent(g);
        }
        for(Variable var:editor.vars){
            var.paintComponent(g);
        }
        toolbar.paintComponent(g);
    }
    /**
     * Getter: toolbar
     * @return toolbar
     */
    public static ToolBar getToolbar(){
        return toolbar;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Callback function for when the mouse is pressed.
     * Checks each Block, Input, and Variable for collision with the mouse position.
     * Updates the selected Block and Variable.
     * @param evt The mouse event containing the mouse position.
     */
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if(Arduino.code != null){
            Arduino.code.setShouldStop(true);
        
        }
        
        isDragging = true;
        int x = evt.getX();
        int y = evt.getY();
        selectedBlock = null;
        //currentVar = null;
//        for(int i = 0; i < editor.blocks.size(); i++){
//            Block block = editor.blocks.get(i);
        for(Block block : editor.blocks){
            block.resetClick();
        }
        for(Block block : editor.blocks){
            if(block.wasClicked(x, y)){
                //System.out.println(block.blockType);
                selectedBlock = block.getClicked();
                break;
            }
        }
        for(Expression exp : editor.expressions){
            exp.resetClick();
        }
        for(Expression exp : editor.expressions){
            if(exp.wasClicked(x, y)){
                //System.out.println(block.blockType);
                selectedBlock = exp.getClicked();
                //System.out.println(selectedBlock);
                break;
            }
        }
        for(Variable var : editor.vars){
            if(var.wasClicked(x, y)){
                //System.out.println(block.blockType);
                selectedBlock = var.getClicked();
                //System.out.println(selectedBlock);
                break;
            }
        }
        Block temp = toolbar.getClickedBlock(x, y);
        if(temp != null){
            selectedBlock = temp;
        }
        Variable tempVar = toolbar.getClickedVar(x, y);
        if(tempVar != null){
            selectedBlock = tempVar;
        }
        getParent().repaint();
        requestFocus();
    }//GEN-LAST:event_formMousePressed
    /**
     * Callback function for when the mouse is dragged.
     * Moves selected blocks and variables recursively.
     * @param evt The mouse event containing the mouse position.
     */
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

        if(isDragging){ 
            if(selectedBlock != null){
                selectedBlock.move(evt.getX(), evt.getY());
                getParent().repaint();
            }
        }
    }//GEN-LAST:event_formMouseDragged
    /**
     * Callback function for when the mouse is released.
     * Removes blocks, Snaps blocks, Removes variables, Snaps Variables.
     * Controls Block and Variable interaction.
     * @param evt The mouse event containing the mouse position.
     */
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        if(selectedBlock != null){
            if(selectedBlock.getX() < toolBarWidth){
                if(selectedBlock.isToolbar()){
                    selectedBlock.goHome();
                }else{
                    selectedBlock.remove(editor);
                }
            }
            else{
                if(selectedBlock.isToolbar()){
                    Block temp = selectedBlock.spawn(editor);
                    selectedBlock.goHome();
                    selectedBlock = temp;
                }
                boolean snapped = false;
                //System.out.println(selectedBlock.blockType);
                if(selectedBlock.blockType.equals("var")){
                    for(Expression exp : editor.expressions){
                        if(exp.snapVariable((Variable)selectedBlock)){
                            snapped = true;
                            break;
                        }
                    }
                    if(!snapped){
                        for(Block block : editor.blocks){
                            if(block.snapVariable((Variable)selectedBlock)){
                                snapped = true;
                                break;
                            }
                        }
                    }    
                }
                else if(selectedBlock.blockType.equals("block")){
                    for(Block block : editor.blocks){ // Check all blocks to be parent
                        if(block.shouldSnap(selectedBlock)){ // If under conditions are met.
                            snapped = true;
                            break;
                        }
                    }
                }
                if(!snapped){
                    //System.out.println("Not Snapped");
                    selectedBlock.disconnect();
                }
                selectedBlock.setIsClicked(false);
                isDragging = false;
                for(Block block : editor.blocks){
                    block.update();
                }
            }
        }     
        getParent().repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        
    }//GEN-LAST:event_formKeyPressed
    /**
     * Callback function for when the keyboard is pressed.
     * Passes the character to the appropriate block.
     * @param evt The event containing the key pressed.
     */
    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped

        if(selectedBlock != null){
            selectedBlock.handleKeyTyped(evt.getKeyChar());
            getParent().repaint();
        }
    }//GEN-LAST:event_formKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
